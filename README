***********************
The CS:APP Data Lab
Directions to Students
***********************

Your goal is to modify your copy of bits.c so that it passes all the
tests in btest without violating any of the coding guidelines.

*********
0. Files:
*********

Makefile    - Makes btest and ishow
README      - This file
bits.c      - The file you will be modifying and handing in
bits.h      - Header file
btest.c     - The main btest program
  btest.h   - Used to build btest
  decl.c    - Used to build btest
  tests.c   - Used to build btest
dlc         - Rule checking compiler binary (data lab compiler)
driver.pl   - Driver program that uses btest and dlc to autograde bits.c

***********************************************************
1. Modifying bits.c and checking it for compliance with dlc
***********************************************************

IMPORTANT: Carefully read the instructions in the bits.c file before
you start. These give the coding rules that you will need to follow if
you want full credit.

Use the dlc compiler (./dlc) to automatically check your version of
bits.c for compliance with the coding guidelines:

       unix> ./dlc bits.c

dlc returns silently if there are no problems with your code.
Otherwise it prints messages that flag any problems.  Running dlc with
the -e switch:

      unix> ./dlc -e bits.c

causes dlc to print counts of the number of operators used by each function.

Once you have a legal solution, you can test it for correctness using
the ./btest program.

*********************
2. Testing with btest
*********************

The Makefile in this directory compiles your version of bits.c with
additional code to create a program (or test harness) named btest.

To compile and run the btest program, type:

    unix> make btest
    unix> ./btest [optional cmd line args]

You will need to recompile btest each time you change your bits.c
program. When moving from one platform to another, you will want to
get rid of the old version of btest and generate a new one.  Use the
commands:

    unix> make clean
    unix> make btest

Btest tests your code for correctness by running millions of test
cases on each function.  It tests wide swaths around well known corner
cases such as Tmin and zero. When btest detects an error in one of
your functions, it prints out the test that failed, the incorrect
result, and the expected result, and then terminates the testing for
that function.

Here are the command line options for btest:

  unix> ./btest -h
  Usage: ./btest [-v 0|1] [-hag] [-f <func name>] [-e <max errors>]
    -e <n>    Limit number of errors to report for single function to n
    -f <name> Check only the named function
    -g        Print compact grading summary (implies -v 0 and -e 0)
    -h        Print this message
    -a        Omit check for valid team members
    -r <n>    Give uniform weight of n for all problems
    -v <n>    Set verbosity to level n
                 n=0: Only give final scores
                 n=1: Also report individual correctness scores (default)

Examples:

  Test all functions for correctness and print out error messages:
  unix> ./btest

  Test all functions in a compact form with no error messages:
  unix> ./btest -g

  Test function foo for correctness:
  unix> ./btest -f foo

btest does not check your code for compliance with the coding
guidelines.  Use dlc to do that.
